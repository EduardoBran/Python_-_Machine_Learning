)
)
)
# Servidor Shiny
server <- function(input, output) {
# Reaja ao botão de previsão
observeEvent(input$predict_button, {
# Crie um novo conjunto de dados com base nas entradas do usuário
new_data <- data.frame(
CheckingAcctStat = factor(input$checking_acct_stat, levels = levels(df$CheckingAcctStat)),
Duration_f = as.factor(ifelse(as.integer(input$duration) <= 17.6, "(0,17.6]",
ifelse(as.integer(input$duration) <= 31.2, "(17.6,31.2]",
ifelse(as.integer(input$duration) <= 46.8, "(31.2,46.8]",
ifelse(as.integer(input$duration) <= 62.4, "(46.8,62.4]", "(62.4,100]"))))),
Purpose = factor(input$purpose, levels = levels(df$Purpose)),
CreditHistory = factor(input$credit_history, levels = levels(df$CreditHistory)),
SavingsBonds = factor(input$savings_bonds, levels = levels(df$SavingsBonds)),
Employment = factor(input$employment, levels = levels(df$Employment)),
CreditAmount_f = as.factor(ifelse(as.integer(input$credit_amount) <= 3880, "(0,3.88e+03]",
ifelse(as.integer(input$credit_amount) <= 6510, "(3.88e+03,6.51e+03]",
ifelse(as.integer(input$credit_amount) <= 9140, "(6.51e+03,9.14e+03]",
ifelse(as.integer(input$credit_amount) <= 11770, "(9.14e+03,1.18e+04]", "(1.18e+04,1e+06]"))))))
# Ajustar níveis novamente para garantir correspondência
for (col in names(new_data)) {
if (is.factor(new_data[[col]])) {
levels(new_data[[col]]) <- levels(df[[col]])
}
}
# Realize a previsão usando o modelo
prediction <- tryCatch(
predict(modelo, new_data),
error = function(e) {
return(paste("Erro na previsão:", e))
}
)
# Traduza a previsão para mensagens mais compreensíveis
prediction_message <- switch(as.character(prediction),
"1" = "Crédito Aprovado!",
"2" = "Crédito Reprovado!",
"Erro na previsão: New factor levels not present in the training data" = "Erro na previsão: Novos níveis de fatores não presentes nos dados de treinamento",
"Erro na previsão: Type of predictors in new data do not match that of the training data" = "Erro na previsão: O tipo de preditores nos novos dados não corresponde ao dos dados de treinamento",
"Erro na previsão:" = "Erro na previsão: Ocorreu um erro durante a previsão")
# Mostre a previsão na saída
output$prediction_output <- renderText({
paste("Resultado da Previsão: ", prediction_message)
})
})
}
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança", choices = unique(df$SavingsBonds)),
selectInput("employment", "Emprego Atual", choices = unique(df$Employment)),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança",
choices = c("Menos de 100 DM (Deutsche Marks) na conta poupança/títulos." = "A61",
"Entre 100 DM e menos de 500 DM na conta poupança/títulos." = "A62",
"Entre 500 DM e menos de 1000 DM na conta poupança/títulos." = "A63",
"1000 DM ou mais na conta poupança/títulos." = "A64",
"Desconhecido/nenhuma conta poupança." = "A65")),
selectInput("employment", "Emprego Atual", choices = unique(df$Employment)),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança",
choices = c("Menos de 100 DM (Deutsche Marks) na conta poupança/títulos." = "A61",
"Entre 100 DM e menos de 500 DM na conta poupança/títulos." = "A62",
"Entre 500 DM e menos de 1000 DM na conta poupança/títulos." = "A63",
"1000 DM ou mais na conta poupança/títulos." = "A64",
"Desconhecido/nenhuma conta poupança." = "A65")),
selectInput("employment", "Emprego Atual",
choices = c("Desempregado." = "A71",
"Menos de 1 ano no emprego atual." = "A72",
"Entre 1 e menos de 4 anos no emprego atual." = "A73",
"Entre 4 e menos de 7 anos no emprego atual." = "A74",
"7 anos ou mais no emprego atual." = "A75")),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
## Carregando Pacotes
library(shiny)
library(randomForest)
# Carregando o modelo
modelo <- readRDS("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco/modelo.rds")
print(modelo)
# Carregando o dataset antes da transformação (baixado do Azure ML)
df <- read.csv("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco/dados.csv", stringsAsFactors = TRUE)
head(df)
# Ajustar níveis das variáveis categóricas
df$Duration_f <- as.factor(df$Duration_f)
df$CreditAmount_f <- as.factor(df$CreditAmount_f)
# Interface do Usuário Shiny
ui <- fluidPage(
titlePanel("Previsão de Risco de Crédito"),
sidebarLayout(
sidebarPanel(
# Adicione aqui os controles para entrada de dados, por exemplo:
selectInput("checking_acct_stat", "Status da Conta Corrente",
choices = c("Menor que 0" = "A11",
"Entre 0 e 200" = "A12",
"Maior que 200" = "A13",
"Não possui" = "A14")),
sliderInput("duration", "Duração do Crédito", min = 0, max = 100, value = 50),
selectInput("purpose", "Finalidade do Crédito",
choices = c("Carro (novo)" = "A40",
"Carro (usado)" = "A41",
"Móveis/Equipamentos" = "A42",
"Rádio/Televisão" = "A43",
"Eletrodomésticos" = "A44",
"Reparos" = "A45",
"Educação" = "A46",
"Férias" = "A47",
"Reciclagem/Retreinamento" = "A48",
"Negócios" = "A49",
"Outros" = "A410")),
selectInput("credit_history", "Histórico de Crédito",
choices = c("Sem créditos tomados / todos os créditos pagos pontualmente." = "A30",
"Todos os créditos neste banco foram pagos pontualmente." = "A31",
"Créditos existentes pagos pontualmente até agora." = "A32",
"Atraso no pagamento no passado." = "A33",
"Conta crítica / outros créditos existentes (não neste banco)." = "A34")),
selectInput("savings_bonds", "Títulos de Poupança",
choices = c("Menos de 100 DM (Deutsche Marks) na conta poupança/títulos." = "A61",
"Entre 100 DM e menos de 500 DM na conta poupança/títulos." = "A62",
"Entre 500 DM e menos de 1000 DM na conta poupança/títulos." = "A63",
"1000 DM ou mais na conta poupança/títulos." = "A64",
"Desconhecido/nenhuma conta poupança." = "A65")),
selectInput("employment", "Emprego Atual",
choices = c("Desempregado." = "A71",
"Menos de 1 ano no emprego atual." = "A72",
"Entre 1 e menos de 4 anos no emprego atual." = "A73",
"Entre 4 e menos de 7 anos no emprego atual." = "A74",
"7 anos ou mais no emprego atual." = "A75")),
sliderInput("credit_amount", "Valor do Crédito", min = 0, max = 1000000, value = 500000),
# Adicione mais controles conforme necessário
actionButton("predict_button", "Realizar Previsão")
),
mainPanel(
# Adicione aqui os resultados da previsão, por exemplo:
verbatimTextOutput("prediction_output")
)
)
)
# Servidor Shiny
server <- function(input, output) {
# Reaja ao botão de previsão
observeEvent(input$predict_button, {
# Crie um novo conjunto de dados com base nas entradas do usuário
new_data <- data.frame(
CheckingAcctStat = factor(input$checking_acct_stat, levels = levels(df$CheckingAcctStat)),
Duration_f = as.factor(ifelse(as.integer(input$duration) <= 17.6, "(0,17.6]",
ifelse(as.integer(input$duration) <= 31.2, "(17.6,31.2]",
ifelse(as.integer(input$duration) <= 46.8, "(31.2,46.8]",
ifelse(as.integer(input$duration) <= 62.4, "(46.8,62.4]", "(62.4,100]"))))),
Purpose = factor(input$purpose, levels = levels(df$Purpose)),
CreditHistory = factor(input$credit_history, levels = levels(df$CreditHistory)),
SavingsBonds = factor(input$savings_bonds, levels = levels(df$SavingsBonds)),
Employment = factor(input$employment, levels = levels(df$Employment)),
CreditAmount_f = as.factor(ifelse(as.integer(input$credit_amount) <= 3880, "(0,3.88e+03]",
ifelse(as.integer(input$credit_amount) <= 6510, "(3.88e+03,6.51e+03]",
ifelse(as.integer(input$credit_amount) <= 9140, "(6.51e+03,9.14e+03]",
ifelse(as.integer(input$credit_amount) <= 11770, "(9.14e+03,1.18e+04]", "(1.18e+04,1e+06]"))))))
# Ajustar níveis novamente para garantir correspondência
for (col in names(new_data)) {
if (is.factor(new_data[[col]])) {
levels(new_data[[col]]) <- levels(df[[col]])
}
}
# Realize a previsão usando o modelo
prediction <- tryCatch(
predict(modelo, new_data),
error = function(e) {
return(paste("Erro na previsão:", e))
}
)
# Traduza a previsão para mensagens mais compreensíveis
prediction_message <- switch(as.character(prediction),
"1" = "Crédito Aprovado!",
"2" = "Crédito Reprovado!",
"Erro na previsão: New factor levels not present in the training data" = "Erro na previsão: Novos níveis de fatores não presentes nos dados de treinamento",
"Erro na previsão: Type of predictors in new data do not match that of the training data" = "Erro na previsão: O tipo de preditores nos novos dados não corresponde ao dos dados de treinamento",
"Erro na previsão:" = "Erro na previsão: Ocorreu um erro durante a previsão")
# Mostre a previsão na saída
output$prediction_output <- renderText({
paste("Resultado da Previsão: ", prediction_message)
})
})
}
# Execute o aplicativo Shiny
shinyApp(ui, server)
# Execute o aplicativo Shiny
shinyApp(ui, server)
####  Big Data Real-Time Analytics com Python e Spark  ####
# Configurando o diretório de trabalho
setwd("~/Desktop/DataScience/CienciaDeDados/2.Big-Data-Real-Time-Analytics-com-Python-e-Spark/7.Analise_Estatistica")
getwd()
## Importando Pacotes
library(readxl)         # carregar arquivos
library(dplyr)          # manipula dados
library(tidyr)          # manipula dados (funcao pivot_longer)
library(ggplot2)        # gera gráficos
library(patchwork)      # unir gráficos
library(corrplot)       # mapa de Correlação
library(caret)          # pacote preProcess para normalização
library(randomForest)
#### Carregando os Dados
df <- data.frame(read.csv2("dados/dataset.csv", sep = ","))
## Modificando todas as variáveis do tipo chr para numérico usando mutate e across
df <- df %>%
mutate(across(where(is.character), as.numeric))
str(df)
names(df)
# Separando as amostras em grupos
consumo_cliente_masculino <- df$consumo_medio_mensal_antes_upgrade[df$genero == 0]
consumo_cliente_feminino <- df$consumo_medio_mensal_antes_upgrade[df$genero == 1]
rm()
# Separando as amostras em grupos
consumo_cliente_masculino_au <- df$consumo_medio_mensal_antes_upgrade[df$genero == 0]
consumo_cliente_feminino_au <- df$consumo_medio_mensal_antes_upgrade[df$genero == 1]
# Visualizando a média de cada grupo
mean(consumo_cliente_masculino_au)
mean(consumo_cliente_feminino_au)
# Executando o Teste t de Duas Amostras Independentes (Teste de Welch)
resultado <- t.test(consumo_cliente_masculino_au, consumo_cliente_feminino_au, var.equal = FALSE)
print(resultado_teste)
print(resultado)
names(df)
# Separando as amostras em grupos
consumo_cliente_masculino_du <- df$consumo_medio_segundo_mes_apos_upgrade[df$genero == 0]
consumo_cliente_feminino_du <- df$consumo_medio_segundo_mes_apos_upgrade[df$genero == 1]
# Visualizando a média de cada grupo
mean(consumo_cliente_masculino_du)
mean(consumo_cliente_feminino_du)
# Executando o Teste t de Duas Amostras Independentes (Teste de Welch)
resultado <- t.test(consumo_cliente_masculino_du, consumo_cliente_feminino_du, var.equal = FALSE)
print(resultado)
## Pergunta 7:
# - Existe diferença de uso do cartão de crédito entre homens e mulheres?
#   Neste caso usaremos: Teste t de Duas Amostras Independentes.
# -> Quando usar: Este teste é apropriado quando queremos comparar as médias de duas amostras independentes.
# -> Por quê usar: O teste é útil para avaliar se existe uma diferença estatisticamente significativa entre os dois grupos que não estão relacionados entre
#                  si, como é o caso de grupos separados por gênero.
# Motivo da escolha: Este teste foi escolhido porque permite uma comparação direta entre os dois grupos independentes - homens e mulheres - em termos de uso
#                    do cartão de crédito medido pelo consumo médio. Ele é ideal para identificar diferenças baseadas em características demográficas nos
#                    dados.
# Hipóteses:
#   H0: Não existe diferença no consumo médio do cartão de crédito entre homens e mulheres (as médias de consumo são iguais entre os gêneros).
#   H1: Existe uma diferença no consumo médio do cartão de crédito entre homens e mulheres (as médias de consumo não são iguais entre os gêneros).
# Se o valor-p for menor que 0,05 rejeitamos a H0. Caso contrário, falhamos em rejeitar a H0.
names(df)
## Verificando Diferença No Consumo Médio Mensal Antes do Upgrade
# Separando as amostras em grupos
consumo_cliente_masculino_au <- df$consumo_medio_mensal_antes_upgrade[df$genero == 0]
consumo_cliente_feminino_au <- df$consumo_medio_mensal_antes_upgrade[df$genero == 1]
# Visualizando a média de cada grupo
mean(consumo_cliente_masculino_au)
mean(consumo_cliente_feminino_au)
# Executando o Teste t de Duas Amostras Independentes (Teste de Welch)
resultado <- t.test(consumo_cliente_masculino_au, consumo_cliente_feminino_au, var.equal = FALSE)
print(resultado)
## Interpretando
# - Como o valor-p 0.4572 é maior que 0.05, falhamos em rejeitar a H0 e podemos dizer que estatisticamente não houve diferença entre o consumo masculino
#   e o consumo feminino mensal antes do upgrade.
## Verificando Diferença No Consumo Médio do Segundo Mês Após o Upgrade
# Separando as amostras em grupos
consumo_cliente_masculino_du <- df$consumo_medio_segundo_mes_apos_upgrade[df$genero == 0]
consumo_cliente_feminino_du <- df$consumo_medio_segundo_mes_apos_upgrade[df$genero == 1]
# Visualizando a média de cada grupo
mean(consumo_cliente_masculino_du)
mean(consumo_cliente_feminino_du)
# Executando o Teste t de Duas Amostras Independentes (Teste de Welch)
resultado <- t.test(consumo_cliente_masculino_du, consumo_cliente_feminino_du, var.equal = FALSE)
print(resultado)
rm(consumo_cliente_masculino_au, consumo_cliente_feminino_au, consumo_cliente_masculino_du, consumo_cliente_feminino_du)
## Interpretando
# - Como o valor-p 0.0003409 é menor que 0,05, rejeitamos a H0. Assim, concluímos que estatisticamente houve diferença entre o consumo masculino e o
#   consumo feminino mensal depois do segundo mês do upgrade
## CONCLUSÃO
# - Com base nos resultados dos testes, podemos concluir que estatisticamente não houve diferença significativa no uso do cartão de crédito entre homens e
#   mulheres antes do upgrade, mas uma diferença significativa foi observada após o upgrade no segundo mês, indicando um possível impacto diferenciado do
#   upgrade entre os gêneros.
## Importando Pacotes
library(readxl)         # carregar arquivos
library(dplyr)          # manipula dados
library(tidyr)          # manipula dados (funcao pivot_longer)
library(ggplot2)        # gera gráficos
library(patchwork)      # unir gráficos
library(corrplot)       # mapa de Correlação
library(caret)          # pacote preProcess para normalização
library(randomForest)
names(df)
data <- df$consumo_medio_mensal_antes_upgrade
shapiro_test <- shapiro.test(data)
print(paste('Statistics=', shapiro_test$statistic, ', p=', shapiro_test$p.value))
if (shapiro_test$p.value > 0.05) {
print(paste('A amostra de', names(df)[7], 'parece ter distribuição Gaussiana (normal).'))
} else {
print(paste('A amostra de', names(df)[7], 'não parece ter distribuição Gaussiana (normal).'))
}
data <- df$consumo_medio_segundo_mes_apos_upgrade
shapiro_test <- shapiro.test(data)
print(paste('Statistics=', shapiro_test$statistic, ', p=', shapiro_test$p.value))
if (shapiro_test$p.value > 0.05) {
print(paste('A amostra de', names(df)[10], 'parece ter distribuição Gaussiana (normal).'))
} else {
print(paste('A amostra de', names(df)[10], 'não parece ter distribuição Gaussiana (normal).'))
}
correlation <- cor.test(df$consumo_medio_mensal_antes_upgrade, df$consumo_medio_segundo_mes_apos_upgrade, method="spearman")
print(paste('Correlação de Spearman:', correlation$estimate, ', Valor-p:', correlation$p.value))
if (correlation$p.value < 0.05) {
print("Existe uma relação estatisticamente significativa.")
} else {
print("Não existe uma relação estatisticamente significativa.")
}
ggplot(df, aes(x=consumo_medio_mensal_antes_upgrade)) +
geom_histogram(bins=30, fill="blue", alpha=0.7) +
ggtitle('Histogram of consumo_medio_mensal_antes_upgrade')
ggplot(df, aes(x=consumo_medio_segundo_mes_apos_upgrade)) +
geom_histogram(bins=30, fill="blue", alpha=0.7) +
ggtitle('Histogram of consumo_medio_segundo_mes_apos_upgrade')
qqnorm(df$consumo_medio_mensal_antes_upgrade)
qqline(df$consumo_medio_mensal_antes_upgrade, col = 'blue')
qqnorm(df$consumo_medio_segundo_mes_apos_upgrade)
qqline(df$consumo_medio_segundo_mes_apos_upgrade, col = 'blue')
## Pergunta 9:
# - Existe uma relação entre o consumo médio no segundo mês após o upgrade e o consumo médio mensal antes do upgrade?
#   Neste caso usaremos: Teste do Qui-Quadrado.
# -> Quando usar: O Teste de Correlação de Spearman é utilizado quando pelo menos uma das variáveis não está normalmente distribuída ou quando a relação
#                 entre as variáveis não é linear.
# -> Por quê usar: Este teste é apropriado aqui porque não requer que os dados sigam uma distribuição normal e é robusto a outliers, o que o torna adequado
#                  para os dados em questão que não passaram no teste de normalidade.
# Motivo da escolha: A escolha do Teste de Spearman se justifica devido à sua capacidade de medir correlações monotônicas entre variáveis que podem não
#                    seguir uma distribuição normal, como é o caso dos dados analisados.
# Hipóteses:
#   H0: Não existe uma relação entre o consumo médio mensal antes do upgrade e o consumo médio no segundo mês após o upgrade.
#   H1: Existe uma relação monotônica entre o consumo médio mensal antes do upgrade e o consumo médio no segundo mês após o upgrade.
# Se o valor-p for menor que 0,05 rejeitamos a H0. Caso contrário, falhamos em rejeitar a H0.
names(df)
#### Verificando se os dados estão Normalmente Distribuídos (Colunas: 'consumo_medio_mensal_antes_upgrade' e 'consumo_medio_segundo_mes_apos_upgrade')
## Através do Teste de Shapiro-Wilk
# Coluna 'consumo_medio_mensal_antes_upgrade'
data <- df$consumo_medio_mensal_antes_upgrade
shapiro_test <- shapiro.test(data)
print(paste('Statistics=', shapiro_test$statistic, ', p=', shapiro_test$p.value))
if (shapiro_test$p.value > 0.05) {
print(paste('A amostra de', names(df)[7], 'parece ter distribuição Gaussiana (normal).'))
} else {
print(paste('A amostra de', names(df)[7], 'não parece ter distribuição Gaussiana (normal).'))
}
# Coluna 'consumo_medio_segundo_mes_apos_upgrade'
data <- df$consumo_medio_segundo_mes_apos_upgrade
shapiro_test <- shapiro.test(data)
print(paste('Statistics=', shapiro_test$statistic, ', p=', shapiro_test$p.value))
if (shapiro_test$p.value > 0.05) {
print(paste('A amostra de', names(df)[10], 'parece ter distribuição Gaussiana (normal).'))
} else {
print(paste('A amostra de', names(df)[10], 'não parece ter distribuição Gaussiana (normal).'))
}
## Através de Gráficos (Histograma e Q-Q Plot)
# Histograma e Q-Q Plot para 'consumo_medio_mensal_antes_upgrade' e 'consumo_medio_segundo_mes_apos_upgrade'
ggplot(df, aes(x=consumo_medio_mensal_antes_upgrade)) +
geom_histogram(bins=30, fill="blue", alpha=0.7) +
ggtitle('Histogram of consumo_medio_mensal_antes_upgrade')
qqnorm(df$consumo_medio_mensal_antes_upgrade)
qqline(df$consumo_medio_mensal_antes_upgrade, col = 'blue')
ggplot(df, aes(x=consumo_medio_segundo_mes_apos_upgrade)) +
geom_histogram(bins=30, fill="blue", alpha=0.7) +
ggtitle('Histogram of consumo_medio_segundo_mes_apos_upgrade')
qqnorm(df$consumo_medio_segundo_mes_apos_upgrade)
qqline(df$consumo_medio_segundo_mes_apos_upgrade, col = 'blue')
## Aplicando o Tesde de Spearman
correlation <- cor.test(df$consumo_medio_mensal_antes_upgrade, df$consumo_medio_segundo_mes_apos_upgrade, method="spearman")
print(paste('Correlação de Spearman:', correlation$estimate, ', Valor-p:', correlation$p.value))
if (correlation$p.value < 0.05) {
print("Existe uma relação estatisticamente significativa.")
} else {
print("Não existe uma relação estatisticamente significativa.")
}
## Interpretando
# - Como o valor-p 2.40021599714833e-22 é menor que 0,05, rejeitamos a hipótese nula. Assim, concluímos que existe uma relação estatisticamente significativa
#   entre o consumo médio mensal antes do upgrade e o consumo médio no segundo mês após o upgrade. Isso indica que as mudanças introduzidas com o upgrade
#   podem ter um impacto duradouro no comportamento de consumo dos clientes.
# Configurando o diretório de trabalho
setwd("~/Desktop/DataScience/CienciaDeDados/2.Big-Data-Real-Time-Analytics-com-Python-e-Spark/8.Machine_Learning_em_Linguagem_Python")
getwd()
## Importando Pacotes
library(readxl)         # carregar arquivos
library(dplyr)          # manipula dados
library(tidyr)          # manipula dados (funcao pivot_longer)
library(ggplot2)        # gera gráficos
library(patchwork)      # unir gráficos
library(corrplot)       # mapa de Correlação
library(caret)          # pacote preProcess para normalização
library(randomForest)
